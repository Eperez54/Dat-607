ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X., "Pokemon" = Name, "Type" = Type.1, "Total HP" = Total)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowestHp <- lowandHighHp %>% filter(HP_Stats == 'Low HP')
highestHp
lowestHp
kable(highestHp, align = 'clc', caption = 'Pokemon w/ Highest HP in Group') %>%
kable_styling(bootstrap_options = c('striped'), full_width = F)
kable(lowestHp, align = 'clc', caption = 'Pokemon w/ Lowest HP in Group') %>%
kable_styling(bootstrap_options = c('striped'), full_width = F)
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X., "Pokemon" = Name, "Type" = Type.1, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X., "Pokemon" = Name, "Type" = Type.1, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(tidyr)
library(knitr)
library(kableExtra)
library(ggplot2)
#pokemon_data <- read.csv('https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv')
pokemon_data <- read.csv('https://raw.githubusercontent.com/Eperez54/Dat-607/main/Project%202/pokemon.csv')
head(pokemon_data, 25)
pokemon_data <- pokemon_data %>%
filter(!str_detect(Name, '\\Mega'))
head(pokemon_data, 15)
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(tidyr)
library(knitr)
library(kableExtra)
library(ggplot2)
#pokemon_data <- read.csv('https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv')
pokemon_data <- read.csv('https://raw.githubusercontent.com/Eperez54/Dat-607/main/Project%202/pokemon.csv')
head(pokemon_data, 25)
pokemon_data <- pokemon_data %>%
filter(!str_detect(Name, '\\Mega'))
head(pokemon_data, 15)
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP)
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total, "HP Stats" = HP_Stats)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowestHp <- lowandHighHp %>% filter(HP_Stats == 'Low HP')
highestHp
lowestHp
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("HP Stats" = HP_Stats, "Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = HP_Stats, "Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total)
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon1" = HP_Stats, "Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowandHighHp <- pokemon_data %>%
select(X.,Name, Type.1, Total) %>%
arrange(Type.1, Total) %>%
group_by(Type.1) %>%
mutate(High_HP = max(Total), Low_HP = min(Total)) %>%
ungroup() %>% mutate(HP_Stats = (Total == High_HP) | (Total == Low_HP)) %>%
filter(HP_Stats == TRUE) %>%
mutate(HP_Stats = ifelse(Total == High_HP, 'High HP', 'Low HP')) %>%
select(X.,Name, Type.1, HP_Stats, Total) %>%
arrange(desc(Total)) %>%
rename("Pokemon #" = X.,  "Type" = Type.1, "Pokemon" = Name, "Total HP" = Total)
highestHp <- lowandHighHp %>% filter(HP_Stats == 'High HP')
lowestHp <- lowandHighHp %>% filter(HP_Stats == 'Low HP')
highestHp
lowestHp
kable(highestHp, align = 'clc', caption = 'Pokemon w/ Highest HP in Group') %>%
kable_styling(bootstrap_options = c('striped'), full_width = F)
kable(lowestHp, align = 'clc', caption = 'Pokemon w/ Lowest HP in Group') %>%
kable_styling(bootstrap_options = c('striped'), full_width = F)
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= Reason))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right", axis.title = element_blank())
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "stack", color="#dddddd")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right", axis.title = element_blank())
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "stack", color="#dddddd")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "stack", color="#dddddd")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "stack", color="red")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "stack", color="black")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(stat = "identity", width = 0.95, position = "vertical", color="black")
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(width = 0.95, position = "stack", color="black")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
filter_pokemon_type <- lowandHighHp %>% filter(Type == 'Grass' | Type == 'Water') %>%
arrange(`Total HP`)
plot <- ggplot(filter_pokemon_type, aes(x = Pokemon, y = `Total HP`, fill= HP_Stats))
plot <- plot + scale_y_continuous()
plot <- plot + theme(legend.position = "right")
plot <- plot + geom_bar(stat = "identity",  position = "stack", color="black")
plot <- plot + facet_wrap(Type ~ ., scales = "free_x")
plot
loan <- read.csv("M:\607\archive\accepted_2007_to_2018Q4.csv")
loan <- read.csv("M:/607/archive/accepted_2007_to_2018Q4.csv")
loan <- read.csv("M:/607/archive/accepted2018Q4.csv")
loan <- read.csv("M:/607/archive/accepted2018Q4.csv")
summary(loan)
colnames(loan)
loan <- loan %>%
select(annual_inc, loan_amnt, int_rate, grade)
loan <- loan %>%
select(annual_inc, loan_amnt, int_rate, grade)
colnames(loan)
loan <- loan %>%
select(annual_inc, loan_amnt, int_rate, grade)
colnames(loan)
head(loan)
loan$int_rate <- as.numeric(unlist(strsplit(as.character(loan$int_rate), '%')))
loan$int_rate <- as.numeric(unlist(strsplit(as.character(loan$int_rate), '%')))
head(loan)
loan$int_rate <- as.numeric(unlist(strsplit(as.character(loan$int_rate), '%')))
head(loan)
loan$loanbin <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loanbin[loan$loanbin==1] <- "<$10,000"
loan$loanbin[loan$loanbin==2] <- "<$20,000"
loan$loanbin[loan$loanbin==3] <- "<$30,000"
loan$loanbin[loan$loanbin==4] <- "<=$40,000"
loan$loanbin <- factor(loan$loanbin, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
loan$loanbin <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loanbin[loan$loanbin==1] <- "<$10,000"
loan$loanbin[loan$loanbin==2] <- "<$20,000"
loan$loanbin[loan$loanbin==3] <- "<$30,000"
loan$loanbin[loan$loanbin==4] <- "<=$40,000"
loan$loanbin <- factor(loan$loanbin, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
head(loan)
loan$loanbin <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loanbin[loan$loanbin==1] <- "<$10,000"
loan$loanbin[loan$loanbin==2] <- "<$20,000"
loan$loanbin[loan$loanbin==3] <- "<$30,000"
loan$loanbin[loan$loanbin==4] <- "<=$40,000"
loan$loanbin <- factor(loan$loanbin, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
tail(loan)
loan$aprgroup<- findInterval(loan$int_rate, seq(0, 30, 10))
#loan amount group
loan$loangroup <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loangroup[loan$loangroup==1] <- "<$10,000"
loan$loangroup[loan$loangroup==2] <- "<$20,000"
loan$loangroup[loan$loangroup==3] <- "<$30,000"
loan$loangroup[loan$loangroup==4] <- "<=$40,000"
loan$loangroup <- factor(loan$loangroup, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
#Loan interest rates group also know as APR
loan$aprgroup<- findInterval(loan$int_rate, seq(0, 30, 10))
loan$aprgroup[loan$aprgroup==1] <- "0-10%"
loan$aprgroup[loan$aprgroup==2] <- "10-20%"
loan$aprgroup[loan$aprgroup==3] <- "20-30%"
loan$aprgroup[loan$aprgroup==4] <- "30-40%"
loan$aprgroup<- factor(loan$aprgroup, levels=c("0-10%", "10-20%", "20-30%", "30-40%"))
# Grouping customer annual salary by every $25k
loan$salarygroup <- findInterval(loan$annual_inc, seq(0, 100000, 25000))
loan$salarygroup[loan$salarygroup==1] <- "<$25,000"
loan$salarygroup[loan$salarygroup==2] <- "<$50,000"
loan$salarygroup[loan$salarygroup==3] <- "<$75,000"
loan$salarygroup[loan$salarygroup==4] <- "<$100,000"
loan$salarygroup[loan$salarygroup==5] <- ">=$100,000"
loan$salarygroup <- factor(loan$salarygroup, levels=c("<$25,000"," <$50,000", "<$75,000",
"<$100,000", ">=$100,000"))
#loan amount group
loan$loangroup <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loangroup[loan$loangroup==1] <- "<$10,000"
loan$loangroup[loan$loangroup==2] <- "<$20,000"
loan$loangroup[loan$loangroup==3] <- "<$30,000"
loan$loangroup[loan$loangroup==4] <- "<=$40,000"
loan$loangroup <- factor(loan$loangroup, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
#Loan interest rates group also know as APR
loan$aprgroup<- findInterval(loan$int_rate, seq(0, 30, 10))
loan$aprgroup[loan$aprgroup==1] <- "0-10%"
loan$aprgroup[loan$aprgroup==2] <- "10-20%"
loan$aprgroup[loan$aprgroup==3] <- "20-30%"
loan$aprgroup[loan$aprgroup==4] <- "30-40%"
loan$aprgroup<- factor(loan$aprgroup, levels=c("0-10%", "10-20%", "20-30%", "30-40%"))
# Grouping customer annual salary by every $25k
loan$salarygroup <- findInterval(loan$annual_inc, seq(0, 100000, 25000))
loan$salarygroup[loan$salarygroup==1] <- "<$25,000"
loan$salarygroup[loan$salarygroup==2] <- "<$50,000"
loan$salarygroup[loan$salarygroup==3] <- "<$75,000"
loan$salarygroup[loan$salarygroup==4] <- "<$100,000"
loan$salarygroup[loan$salarygroup==5] <- ">=$100,000"
loan$salarygroup <- factor(loan$salarygroup, levels=c("<$25,000"," <$50,000", "<$75,000",
"<$100,000", ">=$100,000"))
head(loan)
#loan amount group
loan$loangroup <- findInterval(loan$loan_amnt, seq(0, 30000, 10000))
loan$loangroup[loan$loangroup==1] <- "<$10,000"
loan$loangroup[loan$loangroup==2] <- "<$20,000"
loan$loangroup[loan$loangroup==3] <- "<$30,000"
loan$loangroup[loan$loangroup==4] <- "<=$40,000"
loan$loangroup <- factor(loan$loangroup, levels=c("<$10,000", "<$20,000", "<$30,000", "<=$40,000"))
#Loan interest rates group also know as APR
loan$aprgroup<- findInterval(loan$int_rate, seq(0, 30, 10))
loan$aprgroup[loan$aprgroup==1] <- "0-10%"
loan$aprgroup[loan$aprgroup==2] <- "10-20%"
loan$aprgroup[loan$aprgroup==3] <- "20-30%"
loan$aprgroup[loan$aprgroup==4] <- "30-40%"
loan$aprgroup<- factor(loan$aprgroup, levels=c("0-10%", "10-20%", "20-30%", "30-40%"))
# Grouping customer annual salary by every $25k
loan$salarygroup <- findInterval(loan$annual_inc, seq(0, 100000, 25000))
loan$salarygroup[loan$salarygroup==1] <- "<$25,000"
loan$salarygroup[loan$salarygroup==2] <- "<$50,000"
loan$salarygroup[loan$salarygroup==3] <- "<$75,000"
loan$salarygroup[loan$salarygroup==4] <- "<$100,000"
loan$salarygroup[loan$salarygroup==5] <- ">=$100,000"
loan$salarygroup <- factor(loan$salarygroup, levels=c("<$25,000"," <$50,000", "<$75,000",
"<$100,000", ">=$100,000"))
tail(loan)
datatable(loan)
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
facet_grid(.~grade) +
labs(title = "Distribution of Loan Amounts by Grade", xlab="") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(loan, aes(x=factor(incomebin), y=loan_amnt, fill=factor(intbin))) + geom_boxplot() + facet_grid(. ~ grade) + labs(title = "Boxplot of Loan Amount by Income, Grade, and Interest Rate", x="Income", y="Loan Amount") + theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Interest\nRate")
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
facet_grid(.~grade) +
labs(title = "Distribution of Loan Amounts by Grade", xlab="") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(loan, aes(x=factor(incomebin), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot of Loan Amount by Income, Grade, and Interest Rate", x="Income", y="Loan Amount") + theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Interest\nRate")
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
facet_grid(.~grade) +
labs(title = "Distribution of Loan Amounts by Grade", xlab="") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot of Loan Amount by Income, Grade, and Interest Rate", x="Income", y="Loan Amount") + theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Interest\nRate")
ggplot(loan, aes(x=factor(loanbin), y=int_rate)) +
geom_violin(alpha=0.5, color="gray") +
geom_jitter(alpha=0.1, aes(color=grade)) +
facet_grid(. ~ incomebin) +
labs(title = "Violin Plot of Interest Rate by Loan Amount, Income, and Grade", x="Loan Amount", y="Interest Rate") + theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_fill_discrete(name="Annual\nIncome")
View(loan)
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
labs(title = "Distribution of Loan Amounts based on Grade")
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=count)) +
labs(title = "Distribution of Loan Amounts based on Grade")
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
labs(title = "Distribution of Loan Amounts based on Grade")
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
labs(title = "Loan distribution Amounts based on Grade")
ggplot(loan, aes(x=factor(incomebin), y=loan_amnt, fill=factor(intbin))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot of Loan Amount by Income, Grade, and Interest Rate", x="Income", y="Loan Amount") +
theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Interest\nRate")
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot of Loan Amount by Income, Grade, and Interest Rate", x="Income", y="Loan Amount") +
theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Interest\nRate")
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot for Loan based on Income, Grade, and Interest Rate", x="Income", y="Loan Amount")
?facet_grid
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
# facet_grid(. ~ grade) +
labs(title = "Boxplot for Loan based on Income, Grade, and Interest Rate", x="Income", y="Loan Amount")
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot for Loan based on Income, Grade, and Interest Rate", x="Income", y="Loan Amount")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.5, color="blue") +
geom_jitter(alpha=0.1, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot of Interest Rate by Loan Amount, Income, and Grade", x="Loan Amount", y="Interest Rate")+   theme(axis.text.x = element_text(angle=90, hjust=1)) + scale_fill_discrete(name="Annual\nIncome")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.5, color="blue") +
geom_jitter(alpha=0.1, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.5, color="blue") +
#  geom_jitter(alpha=0.1, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.5, color="red") +
geom_jitter(alpha=0.1, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.6, color="red") +
geom_jitter(alpha=0.5, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.6, color="red") +
geom_jitter(alpha=0.5, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR") +
scale_fill_discrete(name="Annual\nIncome")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.6, color="red") +
geom_jitter(alpha=0.5, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(loan, aes(x=loan_amnt)) +
geom_histogram(aes(fill=..count..)) +
labs(title = "Loan distribution Amounts based on Grade")
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot for Loan based on Income, Grade, and Interest Rate", x="Income", y="Loan Amount")
ggplot(loan, aes(x=factor(loangroup), y=int_rate)) +
geom_violin(alpha=0.6, color="red") +
geom_jitter(alpha=0.5, aes(color=grade)) +
facet_grid(. ~ loangroup) +
labs(title = "Violin Plot for APR based on Loan Amount, Income, and Grade", x="Loan Amount", y="APR") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(loan, aes(x=factor(salarygroup), y=loan_amnt, fill=factor(salarygroup))) +
geom_boxplot() +
facet_grid(. ~ grade) +
labs(title = "Boxplot for Loan based on Income, Grade, and Interest Rate", x="Income", y="Loan Amount") +
theme(axis.text.x = element_text(angle=90, hjust=1))
